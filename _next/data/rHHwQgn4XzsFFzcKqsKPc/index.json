{"pageProps":{"allPostsData":[{"id":"post2","title":"통합 테스트에 @MockBean, @SpyBean을 남용하지 말자","category":null,"thumbnail":"https://images.velog.io/images/woo00oo/post/69f1c47c-686b-4d50-ba28-cd3eea7b92f4/%E1%84%8C%E1%85%A6%E1%84%86%E1%85%A9%E1%86%A8%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%85%E1%85%A7%E1%86%A8%E1%84%92%E1%85%A2%E1%84%8C%E1%85%AE%E1%84%89%E1%85%A6%E1%84%8B%E1%85%AD._004.png","tags":"SpringBootTest, MockBean, SpyBean","date":"2025-02-28 10:00","preview":"\n좋은 테스트에 대해 이야기할 때, FIRST 원칙이 자주 거론된다.\n여기서 F는 Fast를 의미하는데, 좋은 테스트는 빠르게 동작해야하며 자주 실행할 수 있어야 한다 는 것을 의미한다.\n테스트가 느리면 피드백 주기가 길어지고 실행 빈도가 줄어들게 되"},{"id":"post-1-7","title":"객체 생성 비용이 정말 비싼가? (직접 측정해보기)","category":"java","thumbnail":"https://image.zdnet.co.kr/2015/05/15/ICeGlK2DZK2VnBEIz2VP.jpg","tags":"java, object, jmh","date":"2024-11-03 10:00","searchKeywords":"java, jmh, object","description":"객체 생성 비용이 정말 비싼가? (직접 측정해보기)","preview":"\n자바를 비롯한 많은 프로그래밍 언어에서 객체를 생성하는 것은 자연스러운 일이다. \n\n하지만 개발자라면 한 번쯤은 \"객체 생성 비용을 줄여야 한다\"라는 말을 들어본 적이 있을 것이다.\nEffective Java 같은 권위 있는 자료에서도 **\"불필요한"},{"id":"post-2-3","title":"조인 테이블이 왜 생기지? @JoinColumn으로 해결하는 연관관계 매핑의 비밀","category":"JPA","thumbnail":"https://velog.velcdn.com/images/wooyong99/post/6fdebd14-5fe8-4959-b085-74edb6bc4d46/image.png","tags":"JPA","date":"2024-10-10 10:00","searchKeywords":"jpa, JoinColumn, 외래 키, 외래 키 제약 조건","description":"JoinColumn","preview":"\n`@JoinColumn`은 외래키를 매핑할 때 사용한다. 즉, 한 엔티티에서 다른 엔티티를 참조(조인)하는데 사용되는 필드를 지정하는 역할을 한다.\n\n```java\n@Entity  \n@Table(name = \"orders\")  \n@Getter\n@No"},{"id":"post-1-6","title":"내부 메서드 호출시 트랜잭션이 적용되지 않는 이슈","category":"spring","thumbnail":"https://velog.velcdn.com/images/uiurihappy/post/0c13062e-e5cb-45f0-9727-a9ef018b1ffc/image.png","tags":"transactional","date":"2024-10-01 10:00","searchKeywords":"transactional, spring, aop","description":"Transactional 내부 메서드 호출시 트랜잭션이 적용되지 않는 이슈","preview":"\n# @Transactional 동작 원리\n\n## AOP와 프록시 패턴을 통한 트랜잭션 관리\n\nAOP는 엔터프라이즈 애플리케이션 개발에서 객체지향 프로그래밍(OOP)의 한계를 보완해주는 보조적인 프로그래밍 기법이다. 이를 통해 트랜잭션, 캐싱, 로깅 "},{"id":"post-1-4","title":"Gson 라이브러리 InaccessibleObjectException","category":"java","thumbnail":"https://media.techmaster.vn/api/static/bq0a8rs51co78aldi4p0/lsRpW5hr","tags":"gson, java","date":"2024-07-02 10:00","searchKeywords":"gson, java","description":"gson","preview":"\nSpring Boot 2.5.x 버전에서 3.2.x 버전으로 마이그레이션 하는 과정에서 InaccessibleObjectException이 발생하였다. Gson 라이브러리를 사용하는 쪽에서 발생한 문제였는데, 이에 대한 트러블 슈팅 과정을 정리해 보"},{"id":"post-1-3","title":"Fixture Monkey With Kotlin","category":"test","thumbnail":"https://i.imgur.com/J5SIYtU.png","tags":"test","date":"2024-03-03 10:00","searchKeywords":"fixture monkey, test, fixture","description":"fixtureMonkey","preview":"\n테스트를 작성하다보면 프로덕션 코드를 작성하는 시간보다 테스트를 위한 픽스처를 만드는데 더 많은 시간이 소요될 때가 있다.\n\n테스트를 작성하는데 시간이 많이 들고 번거로울 수록 테스트 코드를 생략하게 되고 결국 결함에 취약한 시스템을 구현할 위험이 "},{"id":"post-1-2","title":"객체지향과 탈 국지화","category":"JAVA, OOP","thumbnail":"https://i.imgur.com/e584gko.png","tags":"OOP","date":"2024-02-04 10:00","searchKeywords":"OOP","description":"객체지향과 탈 국지화","preview":"\n최근 두 권의 책을 병행해서 읽는 중인데 서로 조금 상반되는 내용을 읽게 되어 내 생각을 정리해 보는 시간을 가져보았다.\n\n한 권은 펠리너 헤르만스가 쓴 '[프로그래머의 뇌](https://m.yes24.com/Goods/Detail/10591101"},{"id":"post2-2","title":"JPA 트랜잭션과 영속성 컨텍스트","category":null,"thumbnail":"https://images.velog.io/images/dnjscksdn98/post/14072bd8-850b-4d2b-8476-cb5385bbcd36/jpa.png","tags":"JPA","date":"2024-01-07 10:00","searchKeywords":"jpa, entitymanager, 영속성 컨텍스트, 트랜잭션","description":"JPA 트랜잭션과 영속성 컨텍스트","preview":"\n최근 구현한 테스트 코드에서 `@Transactional` 여부에 따라 테스트 결과가 달라지는 문제를 만나게 되었다.\n\n타 서비스로부터 송장 접수 결과에 대한 카프카 메세지를 소비한 다음, 송장 접수에 실패했다면 택배 등록 여부를 실패로 변경하는 로"},{"id":"post-1-1","title":"if-else, switch 성능 비교 (feat. JMH)","category":"JAVA","thumbnail":"https://www.bachelorprint.com/wp-content/uploads/2023/07/Lab-report-Definition.jpg","tags":"Java","date":"2023-12-24 10:00","searchKeywords":"자바, jmh, if, switch","description":"if-else, switch 성능 비교","preview":"\n최근에 회사 팀원분의 추천으로 ['크리에이티브 프로그래머'](https://m.yes24.com/Goods/Detail/121961076)라는 책을 읽어보았는데, 비판적 사고에 대한 중요성을 강조하고 있다.\n\n비판적 사고란 정보를 받아들일 때 단순히"},{"id":"post1","title":"레거시 코드에 테스트를 도입하는 방법","category":null,"thumbnail":"https://img.freepik.com/free-vector/software-code-testing-concept-illustration_114360-8414.jpg?w=2000","tags":"프로젝트","date":"2023-04-07 10:00","preview":"\n제가 인턴으로 팀에 합류하던 당시, 개발팀은 빈번하게 변화하는 요구사항에 고통받고 있었습니다. \n\n테스트 커버리지가 단순히 높은 것이 좋은 테스트 코드라고 생각하지는 않습니다만, 비즈니스 로직 대비 테스트 코드의 비율 자체가 빈약했기 때문에 기능 추"},{"id":"push-notification","title":"PWA 환경에서 푸시 알림 구현하기 (Spring Boot, FCM, Redis)","category":null,"thumbnail":"https://www.pushengage.com/wp-content/uploads/2021/11/Best-FREE-Push-Notification-Services.png","tags":"프로젝트","date":"2023-01-03 10:00","preview":"\n푸시 알림이란 사용자가 서비스를 사용하고 있지 않은 상황에서도 사용자에게 알림을 보내는 방법입니다.\n\n푸시 알림을 구현하는 방법에는 `Server-Sent Events (SSE)` 를 사용하는 방식과 `Firebase Cloud Messaging ("},{"id":"text-me-diary1","title":"GitHub Actions를 통해 CI/CD 구축하기 (feat. Docker, Jib)","category":null,"thumbnail":"https://miro.medium.com/max/1400/1*DmFbJvnRIiQIyi5xBuIXlQ.png","tags":"프로젝트","date":"2022-12-06 10:00","preview":"\n저희 `Text Me` 서비스의 베타 버전이 배포되고 난 뒤에, 사용자들로 부터 수많은 피드백을 받을 수 있었습니다. \n사용자 피드백을 빠르게 반영하다 보니 프로젝트의 빌드 및 배포 주기가 짧아졌고 이러한 과정이 서서히 번거롭게 느껴지기 시작했습니다"},{"id":"infra-1","title":"ubuntu 18.04에 Docker 설치하기","category":null,"thumbnail":"https://www.docker.com/wp-content/uploads/2021/09/Docker-build.png","tags":"infra","date":"2022-12-03 10:00","preview":"\n프로젝트를 진행하면서 도커 허브에 올라가있는 이미지를 가져와서 배포 환경에서 실행해야 하는 요구사항이 발생하였습니다. \n\n이를 위해서 ubuntu환경에 docker를 설치했던 과정을 공유해보겠습니다.\n\n## Docker가 지원하는 OS\n\n다음은 do"},{"id":"object13","title":"[오브젝트] 13장 - 서브클래싱과 서브타이핑","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-11-29 10:00","preview":"\n상속이 사용되는 두 가지 용도\n\n- 타입 계층을 구현하는 것\n    - 부모 클래스\n        - 일반적인 개념을 구현\n        - 부모 클래스는 자식 클래스의 일반화\n    - 자식 클래스\n        - 특수한 개념을 구현\n      "},{"id":"object9","title":"[오브젝트] 9장 - 유연한 설계","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-11-02 10:00","preview":"\n## 1. 개방-폐쇄 원칙 (Open-Closed Principle)\n\n- 개체는 확장에 대해 열려있어야 하고, 수정에 대해서는 닫혀 있어야한다.\n    - 확장에 열려있다.\n        - 새로운 동작을 추가해서 어플리케이션의 기능을 확장할 수 "},{"id":"retrospect-1","title":"나는 개발자로서 어떻게 성장해야 할까","category":null,"thumbnail":"https://i.imgur.com/yTeOAY5.jpg","tags":"회고","date":"2022-10-28 10:00","preview":"나는 과거에 스스로를 성장하는 개발자, 꾸준한 개발자라는 타이틀을 사용해서 포장하고는 했다. 실제로 소프트웨어를 전공하면서 성실히 프로젝트를 진행했고 CS 지식을 쌓았다. 하지만 방향성 없는 꾸준함은 지속 가능하지도 않고 효과적이지도 않다는 사실을 깨"},{"id":"mvc2","title":"어노테이션 기반 MVC로 리팩터링하기 - MVC 2편","category":null,"thumbnail":"https://i.imgur.com/b9vvtK7.png","tags":"Spring","date":"2022-10-17 10:00","preview":"\n이번 포스트에서는 [이전 포스트](https://headf1rst.github.io/TIL/mvc1)에서 구현한 MVC 프레임워크를 \n어노테이션 기반의 MVC로 점진적으로 리팩토링해 나가는 과정에 대해서 다뤄보도록 하겠다.\n\n## 1. 불편함을 감지"},{"id":"mvc1","title":"MVC 프레임워크 만들기 - MVC 1편","category":null,"thumbnail":"https://i.imgur.com/b9vvtK7.png","tags":"Spring","date":"2022-10-08 10:00","preview":"\n7월에 [넥스트 스텝](https://edu.nextstep.camp/)에서 진행하는 [만들면서 배우는 스프링 3기](https://edu.nextstep.camp/s/I7LCaCf3)에 참여하였습니다.\n\n이 포스트는 해당 과정에서 스스로 고민하며 "},{"id":"object7","title":"[오브젝트] 7장 - 객체 분해","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-10-02 10:00","preview":"\n모든 프로그래밍 패러다임은 추상화와 분해의 관점에서 설명 가능\n\n## 추상화 메커니즘\n시스템을 분해하는 방법을 프로시저와 데이터 추상화중 하나를 중심으로 하여 결정해야한다.\n\n- 1. 프로시저 추상화\n    - 소프트웨어가 무엇을 **해야**하는지 "},{"id":"object6","title":"[오브젝트] 6장 - 메시지와 인터페이스","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-26 10:00","preview":"\n\n객체지향 어플리케이션의 가장 중요한 재료는 객체들이 주고받는 `메시지` 이다.\n\n유연하고 재사용 가능한 퍼블릭 인터페이스를 만드는 설계 원칙과 기법이 이번장의 핵심\n\n## 협력과 메시지\n- 클라이언트 - 서버 모델\n- 메시지와 메시지 전송\n    "},{"id":"spring-threadpool","title":"다중 요청 처리를 위한 ThreadPool 적용하기","category":null,"thumbnail":"https://i.imgur.com/mHibXLP.jpg","tags":"Spring","date":"2022-09-20 10:00","preview":"\n프레임워크는 개발자가 쉽고 편하게 개발을 할 수 있도록 많은 기술을 추상화해서 제공한다.\n\n스프링 또한 많은 부분이 추상화 되었으며 개발자 스스로가 의문을 갖지 않는다면, 모른채 넘어갈 기술들이 여럿 존재한다.\n\n오늘은 그러한 기술들 중, 개발자들을"},{"id":"object5","title":"[오브젝트] 5장 - 책임 할당하기","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-19 10:00","preview":"\n## 책임 중심 설계\n\n- 어떤 객체에게 어던 책임을 할당할지 결정해야한다\n- 문제 해결을 위한 다양한 책임 할당 방법이 존재하며 일종의 트레이드오프 활동이다.\n- 상황과 문맥에 따라 최적의 책임 할당 방법을 선택해야한다.\n\n- 책임 중심 설계를 위"},{"id":"object4","title":"[오브젝트] 4장 - 설계 품질과 트레이드오프","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-12 10:00","preview":"\n좋은 객체지향 설계란 올바른 객체에게 올바른 책임을 할당하면서 캡슐화를 통해 낮은 결합도와 높은 응집도를 가진 구조를 창조하는 것\n\n- 구현\n    - 변경될 가능성이 높은 부분\n- 인터페이스\n    - 상대적으로 안정적인 부분\n\n- 변경의 정도에 "},{"id":"object3","title":"[오브젝트] 3장 - 역할, 책임, 협력","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-05 10:00","preview":"\n- 객체지향의 본질 : 협력하는 객체들의 공동체를 창조하는 것\n    - 기능 구현을 위해 어떤 협력이 필요하고 협력을 위해 어떤 역할, 책임이 필요한지 파악\n\n- 객체들은 메시지를 주고 받으며 협력한다\n\n- `협력`\n    - 어플리케이션 기능 구"},{"id":"object2","title":"[오브젝트] 2장 - 객체지향 프로그래밍","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-08-29 10:00","preview":"\n클래스를 먼저 결정하고, 어떤 `속성`과 `메서드`가 필요한지 고민하는것리 아니라 `객체`에 초점을 맞춰야한다\n\n1. 어떤 클래스가 필요한지 이전에 어떤 객체가 필요한지 고민하라\n   클래스는 공통적인 상태, 행동을 공유하는 객체를 추상화한것\n\n2."},{"id":"object1","title":"[오브젝트] 1장 - 객체, 설계","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-08-22 10:00","preview":"\n`패러다임` - 한 시대의 사회 전체가 공유하는 이론 혹은 방법.\n절차형 → 객체지향으로 패러다임 전환을 맞았다.\n\n프로그래밍 패러다임은 과거의 패러다임을 폐기시키는 혁명적 패러다임이 아니라 과거의 패러다임을 개선하는 `발전적 패러다임`이다.\n\n객체"},{"id":"start-new-blog","title":"내가 블로그를 새로 시작하는 이유","category":null,"thumbnail":"https://i.imgur.com/HbkinoQ.jpg","tags":"회고","date":"2022-08-02 10:00","preview":"\n## 앵무새식 블로그 글\n\n처음 블로그를 시작하는 경우에 `TIL (Today I Learned)` 을 목적으로 하루에 하나의 포스팅을 하는 경우를 주위에서 많이 봤고 나 또한 그랬다.\n\n그 당시에는 하나의 포스팅을 마치고 나면 마치 해당 주제에 대"},{"id":"jvm-static","title":"Static 변수 저장위치와 JVM 구조의 변화","category":"JAVA","thumbnail":"https://i.imgur.com/5AJJwhh.png","tags":"Java","date":"2022-07-11 10:00","searchKeywords":"자바, jvm, 정적 변수","description":"Static 변수 저장위치와 JVM 구조의 변화","preview":"\nStatic 키워드를 사용하여 정적 변수와 정적 메서드를 만들수 있는데, 이들을 정적 멤버 (혹은 클래스 멤버) 라고 합니다.\n\n```java\nclass Lesson {\n\t\tstatic int score = 0;\n\t\tstatic String grad"},{"id":"promisor-diary3","title":"Nginx 리버스 프록시 적용하여 Tomcat과 연동하기","category":null,"thumbnail":"https://sysopszone.files.wordpress.com/2017/09/loadbalancer.jpeg?w=676","tags":"프로젝트","date":"2022-06-03 10:00","preview":"\n이번 스프린트에서는 Nginx를 설치하고 리버스 프록시를 적용하여 스프링 부트의 내장 톰캣에 연동하는 작업을 하게 되었는데, 이 과정을 글로 남겨 공유하고자 합니다.\n\n웹 서버는 정적 리소스를 처리하고, WAS는 애플리케이션 로직만을 처리하던 과거와"},{"id":"promisor-diary4","title":"CORS, 알고보니 우리편?","category":null,"thumbnail":"https://user-images.githubusercontent.com/85024598/236966566-6127653c-7540-485e-859f-01240e7e7154.png","tags":"프로젝트","date":"2022-05-26 10:00","preview":"\nServer Side Template 방식이 아닌 프론트와 백으로 나눠서 API 통신을 하는\n프로젝트의 경우, 열에 아홉은 만나게 되는게 바로 `CORS` 입니다.\n\n아니나 다를까 현재 진행중인 프로젝트에서도 CORS 관련 이슈가 올라왔습니다.\n\n!"}],"allTags":[{"name":"전체","count":30},{"name":"object","count":10},{"name":"프로젝트","count":5},{"name":"Spring","count":3},{"name":"java","count":2},{"name":"JPA","count":2},{"name":"Java","count":2},{"name":"회고","count":2},{"name":"SpringBootTest","count":1},{"name":"MockBean","count":1},{"name":"SpyBean","count":1},{"name":"jmh","count":1},{"name":"transactional","count":1},{"name":"gson","count":1},{"name":"test","count":1},{"name":"OOP","count":1},{"name":"infra","count":1}],"profileData":{"name":"고산하","description":"경험 공유를 통해 함께 성장하는 선순환 가치를 만들고자 블로그를 운영하고 있습니다.","email":"sanha0498@gmail.com","github":"headF1rst","instagram":"sanha.io","image":"https://avatars.githubusercontent.com/u/55884834?v=4\""}},"__N_SSG":true}