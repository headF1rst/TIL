{"pageProps":{"categoryInfo":{"numberOfPosts":9,"id":"test4","name":"책책책 책을 읽읍시다","thumbnail":"https://res.cloudinary.com/practicaldev/image/fetch/s--uw3bydJR--/c_imagga_scale,f_auto,fl_progressive,h_1080,q_auto,w_1080/https://thepracticaldev.s3.amazonaws.com/i/3jqcns850jtf8yhhv74v.jpg"},"postDatas":[{"id":"object13","title":"[오브젝트] 13장 - 서브클래싱과 서브타이핑","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-11-29 10:00","preview":"\n상속이 사용되는 두 가지 용도\n\n- 타입 계층을 구현하는 것\n    - 부모 클래스\n        - 일반적인 개념을 구현\n        - 부모 클래스는 자식 클래스의 일반화\n    - 자식 클래스\n        - 특수한 개념을 구현\n      "},{"id":"object9","title":"[오브젝트] 9장 - 유연한 설계","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-11-02 10:00","preview":"\n## 1. 개방-폐쇄 원칙 (Open-Closed Principle)\n\n- 개체는 확장에 대해 열려있어야 하고, 수정에 대해서는 닫혀 있어야한다.\n    - 확장에 열려있다.\n        - 새로운 동작을 추가해서 어플리케이션의 기능을 확장할 수 "},{"id":"object7","title":"[오브젝트] 7장 - 객체 분해","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-10-02 10:00","preview":"\n모든 프로그래밍 패러다임은 추상화와 분해의 관점에서 설명 가능\n\n## 추상화 메커니즘\n시스템을 분해하는 방법을 프로시저와 데이터 추상화중 하나를 중심으로 하여 결정해야한다.\n\n- 1. 프로시저 추상화\n    - 소프트웨어가 무엇을 **해야**하는지 "},{"id":"object6","title":"[오브젝트] 6장 - 메시지와 인터페이스","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-26 10:00","preview":"\n\n객체지향 어플리케이션의 가장 중요한 재료는 객체들이 주고받는 `메시지` 이다.\n\n유연하고 재사용 가능한 퍼블릭 인터페이스를 만드는 설계 원칙과 기법이 이번장의 핵심\n\n## 협력과 메시지\n- 클라이언트 - 서버 모델\n- 메시지와 메시지 전송\n    "},{"id":"object5","title":"[오브젝트] 5장 - 책임 할당하기","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-19 10:00","preview":"\n## 책임 중심 설계\n\n- 어떤 객체에게 어던 책임을 할당할지 결정해야한다\n- 문제 해결을 위한 다양한 책임 할당 방법이 존재하며 일종의 트레이드오프 활동이다.\n- 상황과 문맥에 따라 최적의 책임 할당 방법을 선택해야한다.\n\n- 책임 중심 설계를 위"},{"id":"object4","title":"[오브젝트] 4장 - 설계 품질과 트레이드오프","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-12 10:00","preview":"\n좋은 객체지향 설계란 올바른 객체에게 올바른 책임을 할당하면서 캡슐화를 통해 낮은 결합도와 높은 응집도를 가진 구조를 창조하는 것\n\n- 구현\n    - 변경될 가능성이 높은 부분\n- 인터페이스\n    - 상대적으로 안정적인 부분\n\n- 변경의 정도에 "},{"id":"object3","title":"[오브젝트] 3장 - 역할, 책임, 협력","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-09-05 10:00","preview":"\n- 객체지향의 본질 : 협력하는 객체들의 공동체를 창조하는 것\n    - 기능 구현을 위해 어떤 협력이 필요하고 협력을 위해 어떤 역할, 책임이 필요한지 파악\n\n- 객체들은 메시지를 주고 받으며 협력한다\n\n- `협력`\n    - 어플리케이션 기능 구"},{"id":"object2","title":"[오브젝트] 2장 - 객체지향 프로그래밍","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-08-29 10:00","preview":"\n클래스를 먼저 결정하고, 어떤 `속성`과 `메서드`가 필요한지 고민하는것리 아니라 `객체`에 초점을 맞춰야한다\n\n1. 어떤 클래스가 필요한지 이전에 어떤 객체가 필요한지 고민하라\n   클래스는 공통적인 상태, 행동을 공유하는 객체를 추상화한것\n\n2."},{"id":"object1","title":"[오브젝트] 1장 - 객체, 설계","category":"object","thumbnail":"https://wikibook.co.kr/images/cover/m/9791158391409.png","tags":"object","date":"2022-08-22 10:00","preview":"\n`패러다임` - 한 시대의 사회 전체가 공유하는 이론 혹은 방법.\n절차형 → 객체지향으로 패러다임 전환을 맞았다.\n\n프로그래밍 패러다임은 과거의 패러다임을 폐기시키는 혁명적 패러다임이 아니라 과거의 패러다임을 개선하는 `발전적 패러다임`이다.\n\n객체"}],"profileData":{"name":"고산하","description":"경험 공유를 통해 함께 성장하는 선순환 가치를 만들고자 블로그를 운영하고 있습니다.","email":"sanha0498@gmail.com","github":"headF1rst","instagram":"sanha.io","image":"https://avatars.githubusercontent.com/u/55884834?v=4\""}},"__N_SSG":true}